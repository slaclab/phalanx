# Based on the kafka-persistent.yaml example from the Strimzi documentation
apiVersion: kafka.strimzi.io/v1beta2
kind: Kafka
metadata:
  name: {{ .Values.cluster.name }}
spec:
  kafka:
    template:
      persistentVolumeClaim:
        metadata:
          annotations:
            argocd.argoproj.io/compare-options: IgnoreExtraneous
            argocd.argoproj.io/sync-options: Prune=false
    version: {{ .Values.kafka.version | quote }}
    replicas: {{ .Values.kafka.replicas }}
    listeners:
      # internal istener without tls encryption and with scram-sha-512 authentication
      # used by clients inside the Kubernetes cluster
      - name: plain
        port: 9092
        type: internal
        tls: false
        authentication:
          type: scram-sha-512
      # internal listener with tls encryption and mutual tls authentication
      # used by the schema registry and kafka connect clients
      - name: tls
        port: 9093
        type: internal
        tls: true
        authentication:
          type: tls
      # external listener of type loadbalancer with tls encryption and scram-sha-512
      # authentication used by clients outside the Kubernetes cluster
      - name: external
        port: 9094
        type: loadbalancer
        tls: {{ .Values.kafka.externalListener.tls.enabled }}
        authentication:
          type: scram-sha-512
        configuration:
          bootstrap:
            {{- if .Values.kafka.externalListener.bootstrap.loadBalancerIP }}
            loadBalancerIP: {{ .Values.kafka.externalListener.bootstrap.loadBalancerIP }}
            {{- end }}
            {{- if .Values.kafka.externalListener.bootstrap.annotations }}
            annotations: {{ .Values.kafka.externalListener.bootstrap.annotations }}
            {{- end }}
          {{- if .Values.kafka.externalListener.brokers }}
          brokers:
            {{- range $idx, $broker := .Values.kafka.externalListener.brokers }}
            - broker: {{ $idx }}
              loadBalancerIP: {{ $broker.loadBalancerIP }}
              advertisedHost: {{ $broker.host }}
              advertisedPort: 9094
              annotations:
                {{- range $key, $value  := $broker.annotations }}
                {{ $key }}: {{ $value }}
                {{- end}}
            {{- end }}
          {{- end }}
          {{- if and (.Values.kafka.externalListener.tls.enabled) (.Values.kafka.externalListener.bootstrap.host) }}
          brokerCertChainAndKey:
            secretName: {{ .Values.cluster.name }}-external-tls
            certificate: tls.crt
            key: tls.key
          {{- end }}

    authorization:
      type: simple
{{- if .Values.superusers }}
      superUsers:
{{- range .Values.superusers }}
        - {{ . }}
{{- end }}
{{- end }}
    config:
      # Accept larger messages
      message.max.bytes: 262144
      offsets.topic.replication.factor:  {{ .Values.kafka.replicas }}
      transaction.state.log.replication.factor:  {{ .Values.kafka.replicas }}
      transaction.state.log.min.isr: {{ .Values.kafka.replicas }}
      default.replication.factor: {{ .Values.kafka.replicas }}
      min.insync.replicas: {{ .Values.kafka.replicas }}
      {{- range $key, $value := .Values.kafka.config }}
      {{ $key }}: {{ $value }}
      {{- end }}
    storage:
      type: jbod
      volumes:
        # Note that storage is configured per replica. If there are 3 replicas,
        # and 2 volumes in this array, each replica will get 2
        # PersistentVolumeClaims for the configured size, for a total of 6
        # volumes.
      - id: 0
        type: persistent-claim
        size: {{ .Values.kafka.storage.size }}
        {{- if .Values.kafka.storage.storageClassName }}
        class: {{ .Values.kafka.storage.storageClassName }}
        {{- end}}
        deleteClaim: false
  zookeeper:
    template:
      persistentVolumeClaim:
        metadata:
          annotations:
            argocd.argoproj.io/compare-options: IgnoreExtraneous
            argocd.argoproj.io/sync-options: Prune=false
    replicas: {{ .Values.zookeeper.replicas }}
    storage:
      # Note that storage is configured per replica. If there are 3 replicas,
      # each will get its own PersistentVolumeClaim for the configured size.
      type: persistent-claim
      size: {{ .Values.zookeeper.storage.size }}
      class: {{ .Values.zookeeper.storage.storageClassName }}
      deleteClaim: false
  entityOperator:
    topicOperator: {}
    userOperator: {}
